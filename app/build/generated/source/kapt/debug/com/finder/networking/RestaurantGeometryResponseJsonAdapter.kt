// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.finder.networking

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RestaurantGeometryResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<RestaurantGeometryResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("location")

  private val restaurantLocationResponseAdapter: JsonAdapter<RestaurantLocationResponse> =
      moshi.adapter(RestaurantLocationResponse::class.java, emptySet(), "location")

  public override fun toString(): String = buildString(48) {
      append("GeneratedJsonAdapter(").append("RestaurantGeometryResponse").append(')') }

  public override fun fromJson(reader: JsonReader): RestaurantGeometryResponse {
    var location: RestaurantLocationResponse? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> location = restaurantLocationResponseAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("location", "location", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return RestaurantGeometryResponse(
        location = location ?: throw Util.missingProperty("location", "location", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: RestaurantGeometryResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("location")
    restaurantLocationResponseAdapter.toJson(writer, value_.location)
    writer.endObject()
  }
}
