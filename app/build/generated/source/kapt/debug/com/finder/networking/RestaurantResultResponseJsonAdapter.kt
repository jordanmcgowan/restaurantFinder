// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.finder.networking

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class RestaurantResultResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<RestaurantResultResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "place_id", "vicinity",
      "geometry", "opening_hours", "rating", "user_ratings_total", "price_level", "photos")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "name")

  private val nullableRestaurantGeometryResponseAdapter: JsonAdapter<RestaurantGeometryResponse?> =
      moshi.adapter(RestaurantGeometryResponse::class.java, emptySet(), "geometry")

  private val nullableRestaurantOpeningHoursResponseAdapter:
      JsonAdapter<RestaurantOpeningHoursResponse?> =
      moshi.adapter(RestaurantOpeningHoursResponse::class.java, emptySet(), "hoursResponse")

  private val nullableFloatAdapter: JsonAdapter<Float?> = moshi.adapter(Float::class.javaObjectType,
      emptySet(), "rating")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "ratingCount")

  private val nullableListOfRestaurantPhotosResponseAdapter:
      JsonAdapter<List<RestaurantPhotosResponse>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java,
      RestaurantPhotosResponse::class.java), emptySet(), "photos")

  @Volatile
  private var constructorRef: Constructor<RestaurantResultResponse>? = null

  public override fun toString(): String = buildString(46) {
      append("GeneratedJsonAdapter(").append("RestaurantResultResponse").append(')') }

  public override fun fromJson(reader: JsonReader): RestaurantResultResponse {
    var name: String? = null
    var placeId: String? = null
    var formattedAddress: String? = null
    var geometry: RestaurantGeometryResponse? = null
    var hoursResponse: RestaurantOpeningHoursResponse? = null
    var rating: Float? = null
    var ratingCount: Int? = null
    var priceLevel: Int? = null
    var photos: List<RestaurantPhotosResponse>? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          name = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          placeId = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          formattedAddress = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          geometry = nullableRestaurantGeometryResponseAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          hoursResponse = nullableRestaurantOpeningHoursResponseAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          rating = nullableFloatAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          ratingCount = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          priceLevel = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          photos = nullableListOfRestaurantPhotosResponseAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffe00.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  RestaurantResultResponse(
          name = name,
          placeId = placeId,
          formattedAddress = formattedAddress,
          geometry = geometry,
          hoursResponse = hoursResponse,
          rating = rating,
          ratingCount = ratingCount,
          priceLevel = priceLevel,
          photos = photos
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<RestaurantResultResponse> = this.constructorRef ?:
          RestaurantResultResponse::class.java.getDeclaredConstructor(String::class.java,
          String::class.java, String::class.java, RestaurantGeometryResponse::class.java,
          RestaurantOpeningHoursResponse::class.java, Float::class.javaObjectType,
          Int::class.javaObjectType, Int::class.javaObjectType, List::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          name,
          placeId,
          formattedAddress,
          geometry,
          hoursResponse,
          rating,
          ratingCount,
          priceLevel,
          photos,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: RestaurantResultResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    nullableStringAdapter.toJson(writer, value_.name)
    writer.name("place_id")
    nullableStringAdapter.toJson(writer, value_.placeId)
    writer.name("vicinity")
    nullableStringAdapter.toJson(writer, value_.formattedAddress)
    writer.name("geometry")
    nullableRestaurantGeometryResponseAdapter.toJson(writer, value_.geometry)
    writer.name("opening_hours")
    nullableRestaurantOpeningHoursResponseAdapter.toJson(writer, value_.hoursResponse)
    writer.name("rating")
    nullableFloatAdapter.toJson(writer, value_.rating)
    writer.name("user_ratings_total")
    nullableIntAdapter.toJson(writer, value_.ratingCount)
    writer.name("price_level")
    nullableIntAdapter.toJson(writer, value_.priceLevel)
    writer.name("photos")
    nullableListOfRestaurantPhotosResponseAdapter.toJson(writer, value_.photos)
    writer.endObject()
  }
}
